import os
import tempfile
import subprocess
import logging
import asyncio
import ffmpeg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()


class Form(StatesGroup):
    waiting_photo = State()
    waiting_video_gif = State()
    waiting_video_sticker = State()


basic_sticker_button_name = "üñº –û–±—ã—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"
anime_sticker_button_name = "‚ú® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"
gif_button_name = "üì∏ GIF"
help_button_name = "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
back_button_name = "üîô –ù–∞–∑–∞–¥"


def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=basic_sticker_button_name),
        types.KeyboardButton(text=anime_sticker_button_name)
    )
    builder.row(
        types.KeyboardButton(text=gif_button_name),
        types.KeyboardButton(text=help_button_name)
    )
    return builder.as_markup(resize_keyboard=True)


def back_button():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=back_button_name)]],
        resize_keyboard=True
    )


@dp.message(F.text == back_button_name)
@dp.message(Command("start"))
async def return_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    logger.info(f"User {message.from_user.id} returned to main menu")


@dp.message(F.text == help_button_name)
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "üñº –û–±—ã—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä\n"
        "‚ú® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä\n"
        "üì∏ GIF"
    )
    await message.answer(help_text, reply_markup=main_menu_keyboard())


@dp.message(F.text == gif_button_name)
async def create_gif_handler(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_video_gif)
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è GIF (–¥–æ 15 —Å–µ–∫—É–Ω–¥)",
        reply_markup=back_button()
    )
    logger.info(f"User {message.from_user.id} selected GIF creation")


@dp.message(F.text == basic_sticker_button_name)
async def create_sticker_handler(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_photo)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞",
        reply_markup=back_button()
    )
    logger.info(f"User {message.from_user.id} selected static sticker")


@dp.message(F.text == anime_sticker_button_name)
async def create_animated_sticker_handler(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_video_sticker)
    await message.answer(
        "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ (–¥–æ 3 —Å–µ–∫—É–Ω–¥)",
        reply_markup=back_button()
    )
    logger.info(f"User {message.from_user.id} selected animated sticker")


async def cleanup_temp_files(*paths):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    for path in paths:
        if path and os.path.exists(path):
            try:
                os.remove(path)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {str(e)}")


@dp.message(Form.waiting_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    try:
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)

        with tempfile.TemporaryDirectory() as tmp_dir:
            input_path = os.path.join(tmp_dir, 'photo.jpg')
            output_path = os.path.join(tmp_dir, 'sticker.webp')

            await bot.download_file(file.file_path, input_path)

            subprocess.run([
                'ffmpeg', '-i', input_path,
                '-vf', 'scale=512:512:force_original_aspect_ratio=increase,crop=512:512',
                '-y', output_path
            ], check=True)

            with open(output_path, 'rb') as f:
                await message.answer_sticker(BufferedInputFile(f.read(), 'sticker.webp'))

        await message.answer("‚úÖ –°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=main_menu_keyboard())
        logger.info(f"User {message.from_user.id} created static sticker")

    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode() if e.stderr else "Unknown error"
        logger.error(f"FFmpeg error: {error_msg}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞", reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu_keyboard())

    finally:
        await state.clear()


@dp.message(Form.waiting_video_gif, F.video | F.document)
async def handle_video_gif(message: Message, state: FSMContext):
    try:
        if message.video:
            file_id = message.video.file_id
        else:
            file_id = message.document.file_id

        file = await bot.get_file(file_id)

        with tempfile.TemporaryDirectory() as tmp_dir:
            input_path = os.path.join(tmp_dir, 'video.mp4')
            output_path = os.path.join(tmp_dir, 'animation.gif')
            palette_path = os.path.join(tmp_dir, 'palette.png')

            await bot.download_file(file.file_path, input_path)

            subprocess.run([
                'ffmpeg', '-i', input_path,
                '-vf', 'fps=18,scale=480:-1:flags=lanczos,palettegen',
                '-y', palette_path
            ], check=True)

            subprocess.run([
                'ffmpeg', '-i', input_path, '-i', palette_path,
                '-filter_complex', 'fps=18,scale=480:-1:flags=lanczos[x];[x][1:v]paletteuse',
                '-t', '10', '-loop', '0', '-y', output_path
            ], check=True)

            with open(output_path, 'rb') as f:
                await message.answer_animation(BufferedInputFile(f.read(), 'animation.gif'))

            logger.info(f"User {message.from_user.id} created GIF")

        await message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=main_menu_keyboard())

    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode() if e.stderr else "Unknown error"
        logger.error(f"FFmpeg error: {error_msg}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ GIF", reply_markup=main_menu_keyboard())

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu_keyboard())

    finally:
        await state.clear()


@dp.message(Form.waiting_video_sticker, F.video | F.video_note | F.document)
async def handle_video_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–∏–¥–µ–æ"""
    temp_files = []
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –º–µ–¥–∏–∞
        if message.video_note:
            media = message.video_note
            media_type = "video_note"
        elif message.video:
            media = message.video
            media_type = "video"
        else:
            if not (message.document and message.document.mime_type.startswith('video/')):
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
                return
            media = message.document
            media_type = "document"

        logger.info(f"–ü–æ–ª—É—á–µ–Ω {media_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if media.duration > 3:
            await message.answer("‚ùå –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 3 —Å–µ–∫—É–Ω–¥")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with tempfile.TemporaryDirectory() as tmp_dir:
            input_path = os.path.join(tmp_dir, "input.mp4")
            output_path = os.path.join(tmp_dir, "output.webm")
            temp_files.extend([input_path, output_path])

            file = await bot.get_file(media.file_id)
            await bot.download_file(file.file_path, destination=input_path)
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {input_path}")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
            ffmpeg_cmd = [
                'ffmpeg',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                '-i', input_path,
                '-t', '3',  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                '-c:v', 'libvpx-vp9',  # –ö–æ–¥–µ–∫ –¥–ª—è WebM
                '-b:v', '500k',  # –ë–∏—Ç—Ä–µ–π—Ç
                '-crf', '30',  # –ö–∞—á–µ—Å—Ç–≤–æ
                '-an',  # –ë–µ–∑ –∑–≤—É–∫–∞
                '-loop', '0',  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            ]

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤
            if media_type == "video_note":
                ffmpeg_cmd += [
                    '-vf', (
                        'scale=512:512:force_original_aspect_ratio=increase,'
                        'crop=512:512,'
                        'format=rgba,'
                        'geq=alpha=if(gt(sqrt((X-256)^2+(Y-256)^2),230),0,255)'
                    )
                ]
            else:
                ffmpeg_cmd += [
                    '-vf', 'scale=512:512:force_original_aspect_ratio=increase,crop=512:512'
                ]

            ffmpeg_cmd.append(output_path)

            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            logger.info(f"–ó–∞–ø—É—Å–∫ FFmpeg: {' '.join(ffmpeg_cmd)}")
            result = subprocess.run(
                ffmpeg_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )

            if result.returncode != 0:
                raise subprocess.CalledProcessError(
                    result.returncode,
                    ffmpeg_cmd,
                    output=result.stdout,
                    stderr=result.stderr
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(output_path)
            logger.info(f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            if file_size > 256 * 1024:
                raise ValueError(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size} –±–∞–π—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
            with open(output_path, 'rb') as f:
                await message.answer_sticker(
                    BufferedInputFile(f.read(), filename="sticker.webm")
                )
            logger.info("–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except subprocess.TimeoutExpired:
        logger.error("–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
        await message.answer("‚åõ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ FFmpeg: {e.stderr}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    finally:
        await cleanup_temp_files(*temp_files)
        await state.clear()


@dp.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º",
        reply_markup=main_menu_keyboard()
    )


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())